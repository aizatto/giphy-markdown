{"version":3,"sources":["constants.tsx","components/Images.tsx","components/Search.tsx","components/Trending.tsx","components/RecentImages.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImageSize","ImageFormat","Images","props","imageSize","FIXED_WIDTH","imageFormat","URL","elements","images","map","gif","srcPreview","image","fixed_width_downsampled","parseInt","size","webp_size","fixed_width","url","webp","smallestPreview","src","format","WEBP","availableFormat","key","id","title","alt","onClick","text","copy","message","success","prependRecentImage","style","cursor","marginBottom","SearchInput","Input","Search","gf","GiphyFetch","process","debounce","debounceParent","fn","fetchGifs","query","setGifs","a","length","search","results","data","useState","querystring","parse","window","location","substr","params","paramsArrayValue","paramsValue","Array","isArray","join","defaultValue","localStorage","getItem","value","setValue","newValue","setItem","history","pushState","content","stringify","useQueryStringAndLocalStorage","setQuery","gifs","useEffect","placeholder","enterButton","onChange","event","target","onSearch","fetchTrending","trending","Trending","RecentImages","Option","Select","useLocalStorageState","localStorageValue","jsonValue","JSON","App","setImageSize","setImageFormat","recentImages","setRecentImages","className","width","ORIGINAL","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.bc07eec3.chunk.js","sourcesContent":["export enum ImageSize {\n  FIXED_WIDTH= 'fixed_width',\n  FIXED_WIDTH_DOWNSAMPLED = 'fixed_width_downsampled',\n  ORIGINAL = 'original',\n}\n\nexport enum ImageFormat {\n  URL = 'url',\n  // MP4 = 'mp4', // only available on `downsized_small`, and `looping`\n  WEBP = 'webp', // only available on 'downsampled' formats\n}","import React from 'react';\nimport { IGif } from '@giphy/js-types';\nimport copy from 'copy-to-clipboard';\nimport { message } from 'antd';\nimport { ImageSize, ImageFormat } from '../constants';\n\nexport type Props = {\n  imageSize?: ImageSize,\n  imageFormat?: ImageFormat,\n  prependRecentImage?: (newImages: IGif) => void,\n}\n\nexport type PropsPrependImage = {\n  images: IGif[],\n  imageSize?: ImageSize,\n  imageFormat?: ImageFormat,\n  prependRecentImage?: (newImages: IGif) => void,\n}\n\nfunction smallestPreview(gif: IGif) {\n  const image = gif.images.fixed_width_downsampled;\n\n  const fixed_width_downsampled_gif = parseInt(image.size ?? \"10000000000000\");\n  const fixed_width_downsampled_webp = parseInt(image.webp_size);\n\n  if (fixed_width_downsampled_gif < fixed_width_downsampled_webp) {\n    return gif.images.fixed_width.url;\n  }\n\n  return gif.images.fixed_width.webp;\n}\n\nfunction availableFormat(gif: IGif, size: ImageSize, format: ImageFormat) {\n  switch (format) {\n    case ImageFormat.WEBP: {\n      return gif.images[size][format];\n    }\n\n    case ImageFormat.URL:\n      return gif.images[size].url;\n  }\n}\n\nexport const Images: React.FC<PropsPrependImage> = (props) => {\n  const imageSize: ImageSize = props.imageSize ?? ImageSize.FIXED_WIDTH;\n  const imageFormat: ImageFormat = props.imageFormat ?? ImageFormat.URL;\n\n  const elements = props.images.map(gif => {\n    const srcPreview = smallestPreview(gif);\n    const src = availableFormat(gif, imageSize, imageFormat);\n\n    return (\n      <img\n        key={gif.id}\n        src={srcPreview}\n        title={gif.title}\n        alt={gif.title}\n        onClick={() => {\n          const text = `![${gif.title}](${src})`;\n          copy(text);\n          message.success(text);\n          if (props.prependRecentImage) {\n            props?.prependRecentImage(gif);\n          }\n        }}\n        style={{cursor: 'pointer'}}\n      />\n    );\n  });\n\n  return (\n    <div style={{marginBottom: '2rem'}}>\n      {elements}\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { Input } from 'antd';\nimport debounceParent from 'lodash.debounce';\nimport querystring from \"querystring\";\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { IGif } from '@giphy/js-types';\nimport { Images, Props } from './Images';\n\nconst { Search: SearchInput } = Input;\n\nconst gf = new GiphyFetch(process.env.REACT_APP_GIPHY_API_KEY ?? '')\n\nconst debounce = debounceParent((fn: () => void) => {\n  fn();\n}, 500);\n\nconst fetchGifs = async (query: string, setGifs: (newResults: IGif[]) => void) => {\n  if (!query.length) {\n    return;\n  }\n\n  const results = await gf.search(query);\n  setGifs(results.data);\n}\n\nfunction useQueryStringAndLocalStorage(params: querystring.ParsedUrlQuery, key: string): [string, (newValue: string) => void] {\n  const paramsArrayValue = params[key];\n  const paramsValue = Array.isArray(paramsArrayValue) ? paramsArrayValue.join(' ') : paramsArrayValue;\n  const defaultValue = paramsValue ?? localStorage.getItem(key);\n\n  const [value, setValue] = useState(defaultValue);\n  const setLocalStorageState = (newValue: string) => {\n    setValue(newValue);\n    localStorage.setItem(key, newValue);\n    params[key] = newValue;\n    window.history.pushState(\n      { content: newValue },\n      '',\n      '?' + querystring.stringify(params),\n    );\n  }\n  return [value, setLocalStorageState];\n}\n\nexport const Search: React.FC<Props> = (props) => {\n  const [params] = useState(() => {\n    return querystring.parse(window.location.search.substr(1));\n  });\n  const [query, setQuery] = useQueryStringAndLocalStorage(params, 'query');\n  const [gifs, setGifs] = useState<IGif[]>([]);\n\n  useEffect(() => {\n    fetchGifs(query, setGifs);\n  }, [query]);\n\n  return (\n    <>\n      <h2>Search</h2>\n      <SearchInput\n        placeholder=\"Search\"\n        enterButton=\"Search\"\n        size=\"large\"\n        defaultValue={query}\n        onChange={(event) => {\n          const value = event.target.value;\n          debounce(() => setQuery(value))\n        }}\n        onSearch={(value: string) => debounce(() => setQuery(value))}\n      />\n      <Images images={gifs} {...props} />\n    </>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { GiphyFetch } from '@giphy/js-fetch-api';\nimport { IGif } from '@giphy/js-types';\nimport { Images, Props } from './Images';\n\nconst gf = new GiphyFetch(process.env.REACT_APP_GIPHY_API_KEY ?? '');\n\nconst fetchTrending = async (setGifs: (newResults: IGif[]) => void) => {\n  const results = await gf.trending();\n  setGifs(results.data);\n}\n\nexport const Trending: React.FC<Props> = (props) => {\n  const [gifs, setGifs] = useState<IGif[]>([]);\n\n  useEffect(() => {\n    fetchTrending(setGifs);\n  }, []);\n\n  return (\n    <>\n      <h2>Trending</h2>\n      <Images images={gifs} {...props} />\n    </>\n  )\n}","import React from 'react';\nimport { Images, PropsPrependImage } from './Images';\n\nexport const RecentImages: React.FC<PropsPrependImage> = (props) => {\n  return (\n    <>\n      <h2>Recent Images</h2>\n      <Images {...props} />\n    </>\n  )\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { Search } from './components/Search';\nimport { Trending } from './components/Trending';\nimport { IGif } from '@giphy/js-types';\nimport { RecentImages } from './components/RecentImages';\nimport { Select } from 'antd';\nimport { ImageSize, ImageFormat } from './constants';\nconst { Option } = Select;\n\nfunction useLocalStorageState<T>(key: string, defaultValue: T): [T, (newValue: T) => void] {\n  const localStorageValue = localStorage.getItem(key);\n  const jsonValue: T = localStorageValue ? JSON.parse(localStorageValue) : defaultValue;\n\n  const [value, setValue] = useState<T>(jsonValue);\n  const setLocalStorageState = (newValue: T) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  }\n  return [value, setLocalStorageState];\n}\n\nfunction App() {\n  const [imageSize, setImageSize] = useLocalStorageState('imageSize', ImageSize.FIXED_WIDTH);\n  const [imageFormat, setImageFormat] = useLocalStorageState('imageFormat', ImageFormat.URL);\n  const [recentImages, setRecentImages] = useLocalStorageState<IGif[]>('recentImages', []);\n  const prependRecentImage = (gif: IGif) => {\n    setRecentImages([gif, ...recentImages]);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Copy From Giphy</h1>\n      <p>\n        Instructions: Click on an image to copy the markdown to your clipboard.\n      </p>\n      Copy:\n      <Select\n        style={{width: 200}}\n        defaultValue={imageSize}\n        onChange={(value: ImageSize) => setImageSize(value)}>\n        <Option value={ImageSize.FIXED_WIDTH}>{ImageSize.FIXED_WIDTH}</Option>\n        <Option value={ImageSize.ORIGINAL}>{ImageSize.ORIGINAL}</Option>\n      </Select>\n      <Select\n        style={{width: 200}}\n        defaultValue={imageFormat}\n        onChange={(value: ImageFormat) => setImageFormat(value)}>\n        <Option value={ImageFormat.URL}>{ImageFormat.URL}</Option>\n        {/* <Option value={ImageFormat.MP4}>{ImageFormat.MP4}</Option> */}\n        <Option value={ImageFormat.WEBP}>{ImageFormat.WEBP}</Option>\n      </Select>\n      <RecentImages\n        images={recentImages}\n        imageSize={imageSize}\n        imageFormat={imageFormat}\n        // prependRecentImage={prependRecentImage}\n      />\n      <Trending\n        imageSize={imageSize}\n        imageFormat={imageFormat}\n        prependRecentImage={prependRecentImage}\n      />\n      <Search\n        imageSize={imageSize}\n        imageFormat={imageFormat}\n        prependRecentImage={prependRecentImage}\n      />\n      <div>\n        Powered by Giphy\n      </div>\n      <ul>\n        <li>Previews are Downsampled</li>\n        <li><a href=\"https://www.npmjs.com/package/@giphy/js-fetch-api\">@giphy/js-fetch-api</a></li>\n        <li><a href=\"https://giphy.com/\">https://giphy.com/</a></li>\n        <li><a href=\"https://developers.giphy.com/\">https://developers.giphy.com/</a></li>\n        <li><a href=\"https://www.github.com/aizatto/giphy-markdown/\">GitHub</a></li>\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}